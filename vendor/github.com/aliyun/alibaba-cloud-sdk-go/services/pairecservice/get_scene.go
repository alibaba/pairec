package pairecservice

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetScene invokes the pairecservice.GetScene API synchronously
func (client *Client) GetScene(request *GetSceneRequest) (response *GetSceneResponse, err error) {
	response = CreateGetSceneResponse()
	err = client.DoAction(request, response)
	return
}

// GetSceneWithChan invokes the pairecservice.GetScene API asynchronously
func (client *Client) GetSceneWithChan(request *GetSceneRequest) (<-chan *GetSceneResponse, <-chan error) {
	responseChan := make(chan *GetSceneResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetScene(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetSceneWithCallback invokes the pairecservice.GetScene API asynchronously
func (client *Client) GetSceneWithCallback(request *GetSceneRequest, callback func(response *GetSceneResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetSceneResponse
		var err error
		defer close(result)
		response, err = client.GetScene(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetSceneRequest is the request struct for api GetScene
type GetSceneRequest struct {
	*requests.RoaRequest
	InstanceId string `position:"Query" name:"InstanceId"`
	SceneId    string `position:"Path" name:"SceneId"`
}

// GetSceneResponse is the response struct for api GetScene
type GetSceneResponse struct {
	*responses.BaseResponse
	RequestId   string      `json:"RequestId" xml:"RequestId"`
	Name        string      `json:"Name" xml:"Name"`
	Description string      `json:"Description" xml:"Description"`
	Flows       []FlowsItem `json:"Flows" xml:"Flows"`
}

// CreateGetSceneRequest creates a request to invoke GetScene API
func CreateGetSceneRequest() (request *GetSceneRequest) {
	request = &GetSceneRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("PaiRecService", "2022-12-13", "GetScene", "/api/v1/scenes/[SceneId]", "", "")
	request.Method = requests.GET
	return
}

// CreateGetSceneResponse creates a response to parse from GetScene response
func CreateGetSceneResponse() (response *GetSceneResponse) {
	response = &GetSceneResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
